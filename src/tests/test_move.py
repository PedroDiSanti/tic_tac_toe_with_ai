import unittest
from unittest.mock import patch

from src.app.move import Move


class TestMoves(unittest.TestCase):
    """
    Unit tests for the Move class.
    """
    def setUp(self):
        self.player = Move('X')
        self.board = [
            ['X', 'O', ' '],
            [' ', ' ', ' '],
            [' ', ' ', ' ']
        ]

    def test_is_valid_move(self):
        """
        Test the is_valid_move method of the Player class.

        :return: None
        """
        # Test when move inside the board and spot is vacant
        self.assertTrue(self.player.is_valid_move(1, 1, self.board))

        # Test when spot is occupied
        self.assertFalse(self.player.is_valid_move(0, 0, self.board))

        # Test when move is outside the board
        self.assertFalse(self.player.is_valid_move(-1, 2, self.board))
        self.assertFalse(self.player.is_valid_move(1, 3, self.board))

    def test_get_move(self):
        """
        Test case for the `get_move` method.

        :return: None
        """
        move = self.player.get_move(self.board, 'O')
        valid_moves = [(0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
        self.assertIn(move, valid_moves)

    @patch('builtins.input', return_value='0,2')
    def test_get_move_player(self, mock_input):
        """
        :param mock_input: A `MagicMock` object that is used to mock the `input` function, allowing us to simulate user input for testing purposes.
        :return: None

        This method is a unit test for the `get_move_player` method. It uses the `patch` decorator from the `unittest.mock` library to mock the `input` function and simulate user input.

        The method first sets the return value of the `mock_input` object to '0,2', which represents the coordinates of a move.

        Then, it calls the `get_move` method of the `self.player` object, passing in the `self.board` object and the player marker 'X'.

        Finally, it asserts that the returned move is equal to the expected move, which is [0, 2].
        """
        move = self.player.get_move(self.board, 'X')
        self.assertEqual(move, [0, 2])

    @patch('builtins.input', return_value='0,1')
    def test_generate_player_move(self, mock_input):
        """
        Generates a player move based on user input.

        :param mock_input: A mocked function that simulates user input.
        :return: A list representing the player move coordinates in the format [row, column].
        """
        board = [[' ', ' ', ' '], [' ', ' ', ' '], [' ', ' ', ' ']]
        self.assertEqual(self.player._generate_player_move(board), [0, 1])

    @patch('src.app.move.Move._generate_auto_move', return_value=(1, 1))
    def test_get_move_auto(self, mock_auto_move):
        """
        :param mock_auto_move: Using the `mock_auto_move` parameter, you can pass a mock object to simulate the automatic move generated by `Move._generate_auto_move` method.
        :return: The method returns a tuple representing the coordinate of the move.

        """
        board = [[' ', ' ', ' '], [' ', ' ', ' '], [' ', ' ', ' ']]
        self.assertEqual(self.player.get_move(board, 'O'), (1, 1))
